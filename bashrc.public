# Coloured prompt
function prompt {

    local NONE="\[\033[0m\]"    # unsets color to term's fg color

    # regular colors
    local K="\[\033[0;30m\]"    # black
    local R="\[\033[0;31m\]"    # red
    local G="\[\033[0;32m\]"    # green
    local Y="\[\033[0;33m\]"    # yellow
    local B="\[\033[0;34m\]"    # blue
    local M="\[\033[0;35m\]"    # magenta
    local C="\[\033[0;36m\]"    # cyan
    local W="\[\033[0;37m\]"    # white

    # emphasized (bolded) colors
    local EMK="\[\033[1;30m\]"
    local EMR="\[\033[1;31m\]"
    local EMG="\[\033[1;32m\]"
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    local EMM="\[\033[1;35m\]"
    local EMC="\[\033[1;36m\]"
    local EMW="\[\033[1;37m\]"

    # background colors
    local BGK="\[\033[40m\]"
    local BGR="\[\033[41m\]"
    local BGG="\[\033[42m\]"
    local BGY="\[\033[43m\]"
    local BGB="\[\033[44m\]"
    local BGM="\[\033[45m\]"
    local BGC="\[\033[46m\]"
    local BGW="\[\033[47m\]"

    # Set default host colour
    : ${_HOSTCOLOUR:=W}

    if [[ $_HOSTCOLOUR =~ [0-9]+ ]]
    then
        # 256 color mode
        local HOSTCOLOUR="\[\033[38;5;${_HOSTCOLOUR}m\]"
    else
        # Dereference host colour
        local HOSTCOLOUR=${!_HOSTCOLOUR}
    fi

    # Macros to retain error code in PS1
    local ERROR_PRE="ERROR=\$?"
    local ERROR_POST="if [ \$ERROR = 0 ]; then true; else false; fi"

    # Detect symbolic link
    local SYMLINK="\$(${ERROR_PRE}; if [ ! \"\$(pwd)\" == \"\$(readlink -f .)\" ]; then echo \" ${EMC}(!)${NONE}\"; fi; ${ERROR_POST})"

    # Username with color
    local USER="\$(${ERROR_PRE}; if [ \$UID = 0 ]; then echo \"${R}\"; else echo \"${G}\"; fi; ${ERROR_POST})\u${NONE}"

    # Smiley (escaped because substitution happens on the fly))
    local SMILEY="\$(if [ \$? = 0 ]; then echo \"${EMG}\\\$:)\"; else echo \"${EMR}\\\$:(\"; fi)${NONE}"

    case "$TERM" in
        screen*)
            # Hook for GNU screen
            local SCRNHK="\[\033k\033\\\\\]"
        ;;
        *)
            local SCRNHK=""
        ;;
    esac

    local GIT_BRANCH="\$(${ERROR_PRE}; if git branch 1>/dev/null 2>&1; then echo \" ${Y}(\$(git branch 2>/dev/null | grep -e ^* | cut -d\" \" -f2))${NONE}\"; fi; ${ERROR_POST})"

    local SVN_BRANCH="\$(${ERROR_PRE}; if svn info 1>/dev/null 2>&1; then if [ \"\$(svn status -q --no-ignore)\" == \"\" ]; then echo -n \" ${Y}\"; else echo -n \" ${R}\"; fi; echo -n \"(\$(svn info 2>/dev/null | grep \"^URL: \" | egrep -o \"trunk|branches/[^/]*|tags/[^/]*\"))${NONE}\"; fi; ${ERROR_POST})"


    # Create final PS1
    export PS1="${USER}@${HOSTCOLOUR}\h${NONE} ${EMB}\w${SYMLINK}${NONE}${GIT_BRANCH}${SVN_BRANCH}\n${SMILEY}${SCRNHK} "
}

# Update prompt (will probably be called again in .bashrc.private)
prompt

# ls colours
alias ls="ls --color -Fsh"

# less colours
alias less="less -R"

# 256 colour tmux
alias tmux="tmux -2"

# Forward X over SSH
alias ssh="ssh -X -Y"

# Nice function
alias benice="nice -n20 ionice -c3"

# Fix issue with screen not working after su
alias su="su -l -c 'script -q /dev/null'"

alias fu='eval $(thefuck $(fc -ln -1))'

# Todo.txt
alias t="todo.sh"
alias tw="todo.sh ls @work"
complete -F _todo t
complete -F _todo tw

# default editor
export EDITOR=vim

# highlight grep
alias grep="grep --exclude=tags --exclude=*~ --colour=auto"

# Add user bin to path
export PATH=~/.bin:$PATH

# Add time to history
export HISTTIMEFORMAT="%d/%m/%y - %H:%M:%S "

export HISTFILESIZE=100000

# HSTR config
export HH_CONFIG=hicolor,rawhistory

# aws completion
if [ -f /usr/bin/aws_completer ]; then
    complete -C /usr/bin/aws_completer aws
fi

# Bash history search
bind '"\e[1;5A": history-search-backward'
bind '"\e[1;5B": history-search-forward'


# Source private (host-specific) script
if [ -r ~/.bashrc.private ]
then
    source ~/.bashrc.private
fi

